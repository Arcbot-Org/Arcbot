_model: page
---
title: Command Hooks
---
order: 4
---
article:

!!!! Be very careful when hooking commands, it may slow down the bot if this handler is expensive.


### Overview

Command hooks are a way to provide a sort of middleware. It'll fire this handler before it will run
the intended handler.

You can use this for:
* Verifying the user is allowed to run this command
* Create a sort of filter for which events can invoke a certain command

-----

### Example - Looking up a user's access

```python
from bolt import pre_command_hook

@pre_command_hook()
def check_access(self, command, event):
    author = self.bot.users.find_one({"id": event.author.id})

    if not author:
        new_user = self.bot.api.get_user(event.author.id)
        new_user['access'] = 0
        self.bot.users.replace_one({"id": new_user['id']}, new_user, upsert=True)
        author = self.bot.users.find_one({"id": event.author.id})

    if not int(author['access']) >= int(command.access):
        if command.trigger is not None:
            self.say(event.channel_id, ":warning: You don't have enough access for that command.")
        return False

```

`pre_command_hook`
* Takes no arguments
* Returns `bool` - Tells the bot if it continues executing the command
